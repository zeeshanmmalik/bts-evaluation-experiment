{
    "project": "Launchpad", 
    "original_link": "http://dont.know.yet/699146", 
    "comments": [
        {
            "date": "2007-02-12 11:17:00", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "Check return codes everywhere\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Some checks for return codes are missing.\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Examples:\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "Would you like to add more error handling for return values from \"malloc\" like in the function \"ComputeCost\" and from \"fprintf\" in the function \"handle_get_filename\"?\n", 
                    "is_in_email_summary": true
                }
            ], 
            "name": "elfring-users", 
            "email": "elfring-users"
        }, 
        {
            "date": "2007-04-21 03:17:00", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "RE: Check return codes everywhere\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "what do you propose we do if fprintf(stderr, \"......\")", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " fails?\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "a check for the malloc has been added.\n", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "danmc", 
            "email": "danmc"
        }, 
        {
            "date": "2007-04-21 08:17:00", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "RE: Check return codes everywhere\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "1. Do you care for failed output and log messages?\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "2. How do you think about the reaction \"exit(errno)\" or \"abort()\"?\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "3. Can the tool \"http://splint.org/\" help to find any remaining issues?\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "4.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " Would you like to reduce the efforts for error code checking by an exception class hierarchy?\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "http://dietmar-kuehl.de/mirror/c++-faq/exceptions.html#faq-17.1\nhttp://cexcept.sourceforge.net/\n", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "elfring-users", 
            "email": "elfring-users"
        }, 
        {
            "date": "2010-11-08 02:34:00", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "RE: Check return codes everywhere\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Could you please respond to elfring's questions?", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "  Are there any other return codes that must be checked?\n", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "djdelorie", 
            "email": "djdelorie"
        }, 
        {
            "date": "2011-01-15 12:30:23", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "Re: Check return codes everywhere\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "I'm not sure who DJ directed those questions at.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "I'll put forward my opinion:\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "1. We don't care about fprintf failing.. It is unlikely to happen, and if it does - what are we going to do about it.. print a message?\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "2. exit() and abort() are to be avoided, but a fair response as a result of malloc failure\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "3. Possibly, but we don't have a lot of spare cycles for it. If you wanted to look at static analysis of the code-base, we'd be happy to incorporate any fixes that discovers.\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "4. I don't think so at this time. It is possible we may move to C++ at some point, and that may be up for rediscussion then, but for now I personally prefer to handle errors in the \"old fashioned\" way (or ignore them ;))\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "Currently our malloc strategy appears to be that it will succeed - or we will crash pretty quickly if NULL is returned.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": " This is how glib encourages us to behave in the GTK HID, as g_malloc will exit if it fails.\n", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "pcjc2", 
            "email": "pcjc2"
        }, 
        {
            "date": "2011-01-15 12:33:16", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "Re: Check return codes everywhere\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "Further to this - the developer mailing list is probably the best place to discuss things like this - keeping bug tickets for tangiable bugs or feature requests which can be closed when complete.", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " If we keep bug tickets open to discuss general issues, we end up getting swamped in \"bugs\" we can never close.\n", 
                    "is_in_email_summary": true
                }
            ], 
            "name": "pcjc2", 
            "email": "pcjc2"
        }, 
        {
            "date": "2011-01-15 12:55:15", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "Re: [Pcb-bugs] [Bug 699146] Re: Check return codes everywhere\n> 3.", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "  If you wanted to look at static analysis of the code-base, we'd be happy to incorporate any fixes that discovers.\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "At some point I'll run Gimple's Lint over the code.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "  Do you want a\nthousand patches or one megalithic one against git head?\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Maybe a sub-megalithic for example one that removes all unused\nvariables and functions (stuff that can never be reached in any way)?\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Things that could reasonable be expected to fail, like memory\nallocation, should test for error, and crash gracefully.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "There should be some tangable message in a log or dialog that can be\nreported to the bug tracker that aids in getting the problem fixed.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Don't be afraid to put in lots of __FILE__ and __LINE__ and where\nsupported __FUNCTION__.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "  A wish request might be a tracing mechanism.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "A Seg Fault with no explanation really shows our tools here in a very\npoor light in commercial settings.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Boss's hear things like '#)$*#)* it crashed again' from the other side\nof the cube farm if they are looking for a reason to disparage Open\nSource.\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "-- \n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "http://blog.softwaresafety.net/\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "http://www.designer-iii.com/\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "http://www.wearablesmartsensors.com/\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "bob-paddock", 
            "email": "bob-paddock"
        }, 
        {
            "date": "2011-01-15 13:34:55", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "Re: Check return codes everywhere\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "1. I suggest to call the function \"exit(errno)\" or \"abort()\" (if a try for an error message output failed).\n   Would you like to replace any calls for the function \"fprintf\" by \"g_log\"?\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "   http://library.gnome.org/devel/glib/stable/glib-Message-Logging.html#g-logv\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "4. How do you think about informations from the article \"Quality Matters #6: Exceptions for Practically-Unrecoverable Conditions\" by Matthew Wilson?\n   http://accu.org/index.php/journals/1706/\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "5. How do you think about to apply aspect-oriented software development?\n   http://aspectc.org/\n", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "elfring", 
            "email": "elfring"
        }, 
        {
            "date": "2011-01-15 16:30:55", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "Re: Check return codes everywhere\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "I haven't got any time to follow up on this now.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Like I said earlier, I think this is wrong forum to discuss this.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": " We of course welcome input if you want to submit patches for the project.\n", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "pcjc2", 
            "email": "pcjc2"
        }, 
        {
            "date": "2011-01-15 16:34:23", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "Re: Check return codes everywhere\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Regards patches, logically contained patches are nice, but that might include removing a whole class of errors.", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " There should not be any unused variables..", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " I went through and made sure PCB compile without warnings recently.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "With regards __FILE__ etc..", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " I've seen a nice way to do this.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " For example:\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "#define malloc(x) _malloc(x, __FILE__, __FUNCTION__)\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Then define a function\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "void *malloc (size_t size, const char *file, const char *function)\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "{\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "  void *ptr = malloc (size);\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "  if (ptr == NULL) {\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "    fprintf (stderr, \"....", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " %s %s\", file, function);\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "    abort ();\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "  }\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "  return ptr;\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "}\n", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "pcjc2", 
            "email": "pcjc2"
        }, 
        {
            "date": "2011-01-16 13:49:31", 
            "sentences": [
                {
                    "is_in_lex_summary": false, 
                    "text": "Re: [Pcb-bugs] [Bug 699146] Re: Check return codes everywhere\nOn Sat, Jan 15, 2011 at 11:30 AM, Peter Clifton <email address hidden> wrote:\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> I haven't got any time to follow up on this now.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "How discouraging.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> Like I said earlier, I think this is wrong forum to discuss this.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Where is the correct place to discuss such things?", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "  gEDA-Users isn't,\nand gEDA-Development is not allowed.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "For example __FUNCTION__ is not portable across compilers.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "-Werror should be added to configure.ac, I'll make a patch and submit\nit, as there are still several warnings with the current GIT head.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "# if we have gcc then add -Wall and -Werror\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "if test \"x$GCC\" = \"xyes\";", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " then\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\t# see about adding some extra checks if the compiler takes them\n\tfor flag in -Wall -Werror -Wdeclaration-after-statement ;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " do\n", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "bob-paddock", 
            "email": "bob-paddock"
        }, 
        {
            "date": "2011-01-16 17:08:36", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "Re: Check return codes everywhere\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "That is why the #define is useful - you can write the macro and change it depending on the compiler / platform.\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "A -Werror will be rejected I think.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " I did it before for gEDA, and got told to revert it.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " Different gcc versions will hit different warnings, and it was deemed a bit cruel to break people's builds if gcc introduces a new warning we happen to trigger.\n", 
                    "is_in_email_summary": true
                }
            ], 
            "name": "pcjc2", 
            "email": "pcjc2"
        }, 
        {
            "date": "2011-01-16 17:11:22", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "Re: Check return codes everywhere\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "The problem I have with this bug is that it is at best a \"meta-bug\".", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " (Not so much the original issue, but the way it has gone).", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " There seems to be little point keeping bug tracker items open for the sake of general discussion about a non-problem.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Feel free to request geda-dev list access from Ales if you want to discuss development.\n", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "pcjc2", 
            "email": "pcjc2"
        }, 
        {
            "date": "2011-04-21 04:44:23", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "Re: Check return codes everywhere\n", 
                    "is_in_email_summary": true
                }
            ], 
            "name": "janitor", 
            "email": "janitor"
        }
    ], 
    "title": "Check return codes everywhere"
}