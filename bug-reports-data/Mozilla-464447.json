{
    "project": "Mozilla", 
    "original_link": "http://dont.know.yet/464447", 
    "comments": [
        {
            "date": "2008-11-12 05:42:32", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "Created an attachment (id=347758) [details]", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Patch", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "Avoiding unboxing/reboxing and enabling tail calling in compilers that support\nit (gcc, armcc) are intertwined and are being submitted as a single patch.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "Unbox/rebox are being avoided by having coerceEnter check whether the execution\nengine it is about to invoke is an interpreter function.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "If so then it\nbypasses first unboxCoerceArgs (replacing it with an in-place argument\ncoercion) as well as interp32 and interpN, and goes directly to interp, passing\nthe boxed arguments.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "Tail call optimization is aided by making sure that the addresses of local\nvariables are not being taken in functions that are on the interp->interp call\npath.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "In practice, for functions that perform simple function calls, interp()", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "frames end up being stacked back-to-back on the call stack, all frames for\nintermediate functions disappear.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "One possibly controversial decision is alluded to above, boxed arguments are\ncoerced in-place in coerceEnter.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "I've seen no regressions because of this but\nthe legality of this is not documented, so in principle it may break the\nembedding environment.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Opinions welcome.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Because interp() is now called with boxed arguments, there are implications for\nCallStackFrame and assorted logic.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "This has been handled by making it possible\nfor CallStackFrame to be initialized either by boxed or unboxed argument lists;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "complexity increases somewhat, also in client code I expect.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "One remaining optimization, to be handled another day, is that tail calls are\ninhibited and overhead is added by having to copy arguments in cases when\ncoerceEnter is called with a separate 'this' argument;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "its interface currently\ntakes only a single arguments array, where the this object is argument zero.", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "Lars T Hansen", 
            "email": "Lars T Hansen"
        }, 
        {
            "date": "2008-11-12 06:52:06", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "It's an unwritten assumption throughout the VM that args can be modified in\nplace by the called function, even if args are overlapped with locals (although\nthey aren't currently).", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "...", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "still reviewing", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "Edwin Smith", 
            "email": "Edwin Smith"
        }, 
        {
            "date": "2008-11-12 07:04:10", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "(From update of attachment 347758 [details])", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "in MethodEnv::coerceAtom(), the code could be optimized a bit by", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "switch(Traits::getBuiltinType(t)) {", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "case BUILTIN_number ..", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "case BUILTIN_int ..", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "..", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "}", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "Edwin Smith", 
            "email": "Edwin Smith"
        }, 
        {
            "date": "2008-11-12 08:46:46", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "(In reply to comment #2)", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> (From update of attachment 347758 [details] [details])", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> in MethodEnv::coerceAtom(), the code could be optimized a bit by\n>", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">    switch(Traits::getBuiltinType(t)) {", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">      case BUILTIN_number ..", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">      case BUILTIN_int ..", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">      ..", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">    }", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "That depends.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "Last time Steven and I were in Newton we tried something similar\nin a different situation, and the switch code was slower.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "The reason is that\nshort switches on non-dense value sets are turned back into an \"if\" or a binary\nsearch;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "if we write the \"if\" explicitly we can sometimes do better than the\ncompiler because we can put common cases first.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "That said, I have no\nparticular reason to assume any particular distribution of types here;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "obviously it's program-dependent.", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "Lars T Hansen", 
            "email": "Lars T Hansen"
        }, 
        {
            "date": "2008-11-12 08:47:16", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "(In reply to comment #1)", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> It's an unwritten assumption throughout the VM that args can be modified in\n> place by the called function, even if args are overlapped with locals (although\n> they aren't currently).", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "That's good.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "I'll consider making this a written assumption :-)", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "Lars T Hansen", 
            "email": "Lars T Hansen"
        }, 
        {
            "date": "2008-11-12 09:24:17", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "(In reply to comment #3)", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> (In reply to comment #2)", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> > (From update of attachment 347758 [details] [details] [details])", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> > in MethodEnv::coerceAtom(), the code could be optimized a bit by\n> >", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> >    switch(Traits::getBuiltinType(t)) {", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> >      case BUILTIN_number ..", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> >      case BUILTIN_int ..", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> >      ..", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> >    }", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> That depends.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "Last time Steven and I were in Newton we tried something similar\n> in a different situation, and the switch code was slower.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "The reason is that\n> short switches on non-dense value sets are turned back into an \"if\" or a binary\n> search;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "if we write the \"if\" explicitly we can sometimes do better than the\n> compiler because we can put common cases first.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "That said, I have no\n> particular reason to assume any particular distribution of types here;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> obviously it's program-dependent.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Ah, interesting.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "My beleif that using BUILTIN_foo is faster was based on it\nbeing a small int constant, vs FOO_TYPE being an expression involving a couple\npointer de-refs and a load.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "So, if comparison order matters, maybe:", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "BuiltintType bt = Traits::getBuiltinType(t);", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "if (bt == BUILTIN_number) { }", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "...", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "assumptions:", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "getBuiltinType gets inlined", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "the if(!", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "t) inside there doesn't hurt being first", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "agreed, lots of varibales that could affect performance.", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "Edwin Smith", 
            "email": "Edwin Smith"
        }, 
        {
            "date": "2008-11-12 09:25:32", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "aside: we'd clean up a lot of code by creating a real Traits for \"*\" and never\nhaving null Traits* to worry about.", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "Edwin Smith", 
            "email": "Edwin Smith"
        }, 
        {
            "date": "2008-11-12 09:29:21", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "(In reply to comment #6)", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> aside: we'd clean up a lot of code by creating a real Traits for \"*\" and never\n> having null Traits* to worry about.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "Is that a bug or a work item?", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ":-)", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "Lars T Hansen", 
            "email": "Lars T Hansen"
        }, 
        {
            "date": "2008-11-12 09:31:36", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "work item, if we agree its a good idea.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "just being verbose today.", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "Edwin Smith", 
            "email": "Edwin Smith"
        }, 
        {
            "date": "2008-11-12 10:26:17", 
            "sentences": [
                {
                    "is_in_lex_summary": false, 
                    "text": "> > search;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "if we write the \"if\" explicitly we can sometimes do better than the\n> > compiler because we can put common cases first.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "That said, I have no\n> > particular reason to assume any particular distribution of types here;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> > obviously it's program-dependent.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> Ah, interesting.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "My beleif that using BUILTIN_foo is faster was based on it\n> being a small int constant, vs FOO_TYPE being an expression involving a couple\n> pointer de-refs and a load.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "Using the constants is definitely a (slight) win over the FOO_TYPE\nexpression...", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "the place we saw if-else as a win over switch was in\nget/setSlotAtom, where \"atom\" is most common, thus putting it first netted a\nsmall but measurable win.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "(that said, a switch that was done as a lookup table\nmight be better still, but there's no way to ensure all compilers do that,\nalas)", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "Steven Johnson", 
            "email": "Steven Johnson"
        }, 
        {
            "date": "2008-11-12 10:26:57", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "(In reply to comment #8)", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> work item, if we agree its a good idea.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "just being verbose today.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "+1, let's add it as a work item....", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "that's been a wart that should be cleaned\nsomeday.", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "Steven Johnson", 
            "email": "Steven Johnson"
        }, 
        {
            "date": "2008-11-12 10:28:21", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "(In reply to comment #4)", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> (In reply to comment #1)", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> > It's an unwritten assumption throughout the VM that args can be modified in\n> > place by the called function, even if args are overlapped with locals (although\n> > they aren't currently).", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "I'll fix nativegen.py to no longer make the arguments const, then :-)", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "Steven Johnson", 
            "email": "Steven Johnson"
        }, 
        {
            "date": "2008-11-12 11:51:05", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "Why does interp32, interpN, etc take uint32* instead of Atom* (or even\nuintptr*)?", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "(I realize this is historical, just wondering if it matters...", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "uint32 doesn't seem like a very 64-bit-safe declaration)", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "Steven Johnson", 
            "email": "Steven Johnson"
        }, 
        {
            "date": "2008-11-13 01:25:28", 
            "sentences": [
                {
                    "is_in_lex_summary": false, 
                    "text": "Pushed to tamarin-redux as changeset 1094:6321952e04d0", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "Lars T Hansen", 
            "email": "Lars T Hansen"
        }, 
        {
            "date": "2008-11-13 01:26:43", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "(In reply to comment #12)", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> Why does interp32, interpN, etc take uint32* instead of Atom* (or even\n> uintptr*)?", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "(I realize this is historical, just wondering if it matters...", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> uint32 doesn't seem like a very 64-bit-safe declaration)", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "Atom* would be wrong because the arguments to interp32 and interpN are unboxed\nvalues (unlike the arguments to interp, which are now boxed).", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "But uint32_t*\ndoes not seem right, I agree -- should be byte*, void*, or uintptr_t* IMO.", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "Lars T Hansen", 
            "email": "Lars T Hansen"
        }, 
        {
            "date": "2008-11-13 10:23:36", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "(In reply to comment #14)", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> Atom* would be wrong because the arguments to interp32 and interpN are unboxed\n> values (unlike the arguments to interp, which are now boxed).", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "But uint32_t*\n> does not seem right, I agree -- should be byte*, void*, or uintptr_t* IMO.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "Better yet, declare a new type (\"unboxed_t*\" or some such) to emphasize this.", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "Steven Johnson", 
            "email": "Steven Johnson"
        }, 
        {
            "date": "2008-11-14 00:31:38", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "(In reply to comment #15)", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> (In reply to comment #14)", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> > Atom* would be wrong because the arguments to interp32 and interpN are unboxed\n> > values (unlike the arguments to interp, which are now boxed).", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "But uint32_t*\n> > does not seem right, I agree -- should be byte*, void*, or uintptr_t* IMO.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> Better yet, declare a new type (\"unboxed_t*\" or some such) to emphasize this.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "Will add a work item, should not be a lot of work though.", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "Lars T Hansen", 
            "email": "Lars T Hansen"
        }, 
        {
            "date": "2009-10-13 16:48:34", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "Resolved fixed engineering / work item that has been pushed.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Setting status to\nverified.", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "Chris Peyer", 
            "email": "Chris Peyer"
        }
    ], 
    "title": "[redux] Avoid unbox/rebox on the interpreter call path; enable tail call optimization on call path"
}