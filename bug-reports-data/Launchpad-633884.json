{
    "project": "Launchpad", 
    "original_link": "http://dont.know.yet/633884", 
    "comments": [
        {
            "date": "2010-09-09 09:59:36", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "TestCaseSource does not use Arguments, Categories etc as described in documentation for 2.5.7\nWhat happens:\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "Created a class X that is returned as an IEnumerable<X> in method M of class Z.", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "  \nThis is used in [TestCaseSource(typeof(Z), \"M\"]\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Class X has been given\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "\t\tpublic string TestName { get;", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " private set;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " }\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "\t\tpublic IList<string> Categories { get;", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " private set;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " }\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "\t\tpublic bool Ignored;\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "In the constructor for X,  these have been initialised\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\t\t\tthis.Categories = new List<string> { \"foo\" };\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\t\t\tthis.TestName = note;\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\t\t\tthis.Ignored = true;\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "The test is executed(contrary to Ignored==true).\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "There are no categories in the NUinit GUI.\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "The test is not renamed.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "What I expect:\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "The test is flagged as ignore.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "There is a category \"foo\".\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "The test is named after the string value in TestName.\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "NUnit 2.5.7.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Nunit.exe (GUI)\n", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "hamish-gunn", 
            "email": "hamish-gunn"
        }, 
        {
            "date": "2010-09-09 16:19:18", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "Re: [Bug 633884] [NEW] TestCaseSource does not use Arguments, Categories etc as described in documentation for 2.5.7\nI'm not sure why you are expecting this to work.\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "What's the signature of the test method to which\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "you apply this attribute?\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Charlie\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "On Thu, Sep 9, 2010 at 11:59 AM, Hamish Gunn <email address hidden> wrote:\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> Public bug reported:\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> What happens:\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> Created a class X that is returned as an IEnumerable<X> in method M of class Z.\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> This is used in [TestCaseSource(typeof(Z), \"M\"]\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> Class X has been given\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">        public string TestName { get;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " private set;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " }\n>\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">        public IList<string> Categories { get;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " private set;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " }\n>\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">        public bool Ignored;\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> In the constructor for X, these have been initialised\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">            this.Categories = new List<string> { \"foo\" };\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">            this.TestName = note;\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">            this.Ignored = true;\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> The test is executed(contrary to Ignored==true).\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> There are no categories in the NUinit GUI.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> The test is not renamed.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> What I expect:\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> The test is flagged as ignore.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> There is a category \"foo\".\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> The test is named after the string value in TestName.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> NUnit 2.5.7.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> Nunit.exe (GUI)\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> ** Affects: nunitv2\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">   Importance: Undecided\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">     Status: New\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> --\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> TestCaseSource does not use Arguments, Categories etc as described in documentation for 2.5.7\n> https://bugs.launchpad.net/bugs/633884\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> You received this bug notification because you are a member of NUnit\n> Developers, which is subscribed to NUnit V2.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "charlie.poole", 
            "email": "charlie.poole"
        }, 
        {
            "date": "2010-09-10 08:51:24", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "Re: TestCaseSource does not use Arguments, Categories etc as described in documentation for 2.5.7\nIt is a logical deduction from the description at http://nunit.org/index.php?", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "p=testCaseSource&r=2.5.7\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "From there I read:\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "\"If sourceType is not specified, the class containing the test method is used.", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": " NUnit will construct it using either the default constructor or - if arguments are provided - the appropriate constructor for those arguments.\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "The sourceName argument represents the name of the source used to provide test cases.", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " It has the following characteristics:\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "...\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "    * It must return an IEnumerable or a type that implements IEnumerable.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "    * The individual items returned by the enumerator must be compatible with the signature of the method on which the attribute appears. The rules for this are described in the next section. \"\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "and\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\"Constructing Test Cases\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "In constructing tests, NUnit uses each item test case returned by the enumerator as follows: \n...\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "If it is any other type of object, it is examined using reflection and any public fields or properties with the following names are used:\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "...\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Categories\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "    An IList of categories to be applied to the test case.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "...\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "TestName\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "    Provides a name for the test.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": " If not specified, a name is generated based on the method name and the arguments provided \nIgnored\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "    If true, the test case is ignored.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "....", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " \"\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "Here is the key reason I expect it to work - you say:\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "***\" it is examined using reflection and any public fields or properties with the following names are used:\"***.  \n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\"It\" is \"each item test case returned by the enumerator\".", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "  In my case (see below for actual code), \"it\" is an instance of class SimTestDescriptor.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "  You'll see it has public TestName amongst others.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "  Since I expose that, I expect it to be used according to your explanation;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " ditto Categories and Ignored.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Here are the signatures (comments etc.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " excluded):\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "[TestCaseSource(typeof(SimTestDataGenerator), \"TestArguments\")]\npublic void Test1(SimTestDescriptor descriptor)\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "public class SimTestDataGenerator\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "{\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\t\tpublic SimTestDataGenerator()\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "...\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\t\tpublic IEnumerable<SimTestDescriptor> TestArguments()\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "...\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "}\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "public class SimTestDescriptor\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "{\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "        public SimTestDescriptor(string category, string note, string simFile, bool update, Regression.RunLocation runLocation, ThreadMode threadMode, ShockFileAction shockFileAction, string baseLineCulture, string versionUnderTestCulture)\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "...", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "        public string TestName { get;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " private set;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " }\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "        public IList<string> Categories { get;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " private set;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " }\n        public string Note;\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "        public string SimFile;\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "        public bool Update;\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "        public Regression.RunLocation RunLocation;\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "        public ThreadMode ThreadMode;\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "        public ShockFileAction ShockFileAction;\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "        public string BaselineCulture;\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "        public string VersionUnderTestCulture;\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "        public bool Ignored;\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "}\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "hamish-gunn", 
            "email": "hamish-gunn"
        }, 
        {
            "date": "2010-09-10 14:00:52", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "Re: [Bug 633884] Re: TestCaseSource does not use Arguments, Categories etc as described in documentation for 2.5.7\nIndeed!", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " I see the problem.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " I'm afraid it's a documentation bug.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "There should be an additional element in the list under \"Constructing\nTest Cases\"\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "0. If the test has a single argument and the returned value matches the type of\nthat argument it is used directly.\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "This is a case where the author (me) thought that was \"obvious\" - but clearly\nit is not.\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "If you want your test to process the contents of your own struct or class, then\nuse it as an argument and return that type.", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": " If you want NUnit to perform\nprocessing described, then the actual arguments should be stored in an\nArguments member.", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": " In fact, in that case, you may as well use TestCaseData,\nwhich contains all the functionality you are looking for and will also continue\nto work under NUnit 3.0, where we no longer use reflection in this way.\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Sorry for the confusion.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Charlie\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "On Fri, Sep 10, 2010 at 1:51 AM, Hamish Gunn <email address hidden> wrote:\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> It is a logical deduction from the description at\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> http://nunit.org/index.php?", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "p=testCaseSource&r=2.5.7\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> >From there I read:\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> \"If sourceType is not specified, the class containing the test method is used.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": " NUnit will construct it using either the default constructor or - if arguments are provided - the appropriate constructor for those arguments.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> The sourceName argument represents the name of the source used to\n> provide test cases.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " It has the following characteristics:\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> ...\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">  * It must return an IEnumerable or a type that implements IEnumerable.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">  * The individual items returned by the enumerator must be compatible with the signature of the method on which the attribute appears.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": " The rules for this are described in the next section.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " \"\n>\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> and\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> \"Constructing Test Cases\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> In constructing tests, NUnit uses each item test case returned by the enumerator as follows:\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> ...\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> If it is any other type of object, it is examined using reflection and any public fields or properties with the following names are used:\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> ...\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> Categories\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">  An IList of categories to be applied to the test case.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> ...\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> TestName\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">  Provides a name for the test.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": " If not specified, a name is generated based on the method name and the arguments provided\n> Ignored\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">  If true, the test case is ignored.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> ....", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " \"\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> Here is the key reason I expect it to work - you say:\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> ***\" it is examined using reflection and any public fields or properties with the following names are used:\"***.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> \"It\" is \"each item test case returned by the enumerator\".", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": " In my case\n> (see below for actual code), \"it\" is an instance of class\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> SimTestDescriptor.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " You'll see it has public TestName amongst others.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> Since I expose that, I expect it to be used according to your\n> explanation;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " ditto Categories and Ignored.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> Here are the signatures (comments etc.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " excluded):\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> [TestCaseSource(typeof(SimTestDataGenerator), \"TestArguments\")]\n> public void Test1(SimTestDescriptor descriptor)\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> public class SimTestDataGenerator\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> {\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">        public SimTestDataGenerator()\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> ...\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">        public IEnumerable<SimTestDescriptor> TestArguments()\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> ...\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> }\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> public class SimTestDescriptor\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> {\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">    public SimTestDescriptor(string category, string note, string simFile, bool update, Regression.RunLocation runLocation, ThreadMode threadMode, ShockFileAction shockFileAction, string baseLineCulture, string versionUnderTestCulture)\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> ...\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">    public string TestName { get;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " private set;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " }\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">    public IList<string> Categories { get;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " private set;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": " }\n>    public string Note;\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">    public string SimFile;\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">    public bool Update;\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">    public Regression.RunLocation RunLocation;\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">    public ThreadMode ThreadMode;\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">    public ShockFileAction ShockFileAction;\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">    public string BaselineCulture;\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">    public string VersionUnderTestCulture;\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">    public bool Ignored;\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> }\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> --\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> TestCaseSource does not use Arguments, Categories etc as described in documentation for 2.5.7\n> https://bugs.launchpad.net/bugs/633884\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> You received this bug notification because you are a member of NUnit\n> Developers, which is subscribed to NUnit V2.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "charlie.poole", 
            "email": "charlie.poole"
        }, 
        {
            "date": "2010-09-10 14:43:44", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "Re: TestCaseSource does not use Arguments, Categories etc as described in documentation for 2.5.7\nThanks.", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "  I'm afraid I don't understand your recommendation.\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "This is the first bit I don't follow:\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "\"If you want your test to process the contents of your own struct or class, then use it as an argument and return that type.\"\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Do you mean\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "\t\t[TestCaseSource(typeof(SimTestDataGenerator), \"TestArguments\")]\n\t\tpublic void IndividualTestCasesShouldBeGenerated(Type simTestDescriptorClass) ?\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "What do I return \"that type\" from?\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Sorry but I'm feeling pretty foolish here.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "  Can you give me an example?\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "I don't follow this either:\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": " \"If you want NUnit to perform processing described, then the actual arguments should be stored in an Arguments member.\"", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " \nA member of which class?\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "You also say\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "\"In fact, in that case, you may as well use TestCaseData, which contains all the functionality you are looking for and will also continue to work under NUnit 3.0, where we no longer use reflection in this way.\"\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "I don't want to write code that will be deprecated in the next version of NUnit so does that mean TestCaseData will be the only way forward?\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "I don't think I'm stupid but I'm coming at this for the first time and I suspect the gulf between your familiarity and mine is the problem.\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Thanks for your time.\n", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "hamish-gunn", 
            "email": "hamish-gunn"
        }, 
        {
            "date": "2010-09-10 15:20:22", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "Re: TestCaseSource does not use Arguments, Categories etc as described in documentation for 2.5.7\nI've got something working using TestCaseData.", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "  It does seem to cut out a step.", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "  However it means a long signature for the test.\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "\t\t[TestCaseSource(typeof(SimTestDataGenerator), \"TestArguments\")]\n\t\tpublic void IndividualTestCasesShouldBeGenerated(bool ignored, IList<string> categories, string note,\n\t\t\tstring simFile, bool update, RunLocation runLocation, ThreadMode threadMode, ShockFileAction shockFileAction,\n\t\t\tstring baselineCulture, string versionUnderTestCulture)\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "I think I may see your point now if I use TestCaseData to return an instance of a class that describes the data.", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "  Perhaps something along the lines of:\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "\t\t[TestCaseSource(typeof(SimTestDataGenerator), \"TestArguments\")]\n\t\tpublic void IndividualTestCasesShouldBeGenerated(SimTestDescriptor descriptor)\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\t\t{\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "...\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "and\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "\t\tpublic IEnumerable TestArguments()\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\t\t{\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\t\t\tforeach (SimTestFileDescription line in this.Descriptions)\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\t\t\t{\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\t\t\t\tif (!", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "line.Ignore)\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\t\t\t\t{\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\t\t\t\t\tyield return new TestCaseData(new SimTestDescriptor(line.Category, line.Note, line.SimFile, line.Update,\n\t\t\t\t\t                                GetEnum<RunLocation>(\"RunLocation\", line.RunLocation),\n\t\t\t\t\t\t\t\t\tGetEnum<ThreadMode>(\"ThreadMode\", line.ThreadMode),\n\t\t\t\t\t\t\t\t\tGetEnum<ShockFileAction>(\"ShockFileAction\", line.ShockFileAction),\n\t\t\t\t\t\t\t\t\tline.BaselineCulture, line.VersionUnderTestCulture))\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\t\t\t\t\t\t\t\t\t\t\t\t\t   .", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "SetCategory(line.Category)\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\t\t\t\t\t\t\t\t\t\t\t\t\t   .", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "SetName(line.Note)\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\t\t\t\t\t\t\t\t\t\t\t\t\t   .", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "SetDescription(line.Note);\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\t\t\t\t}\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\t\t\t}\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\t\t}\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "hamish-gunn", 
            "email": "hamish-gunn"
        }, 
        {
            "date": "2010-09-10 17:10:16", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "Re: [Bug 633884] Re: TestCaseSource does not use Arguments, Categories etc as described in documentation for 2.5.7\nHi Hamish,\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "I think I'll start again.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " :-)\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Let's say I have a test that I want to run multiple times with\ndiffering arguments.", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " I decide\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "to use TestCaseSourceAttribute to specify them.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " The source may be a\nfield, a method\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "or a property and should provide an IEnumerable of some type.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " There\nare three choices\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "with regard to that type:\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "1. It may be an object array that gives the arguments needed by the\ntest method, e.g.:\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "   object[] TestArguments = new object[] {\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "            new object[] { 5, \"five\" },\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "            new object[] { 42, \"answer\" }\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "   };\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "In this case the outer object[] is providing the IEnumerable and each\ninner object[]\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "represents a test case.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " The method signature would have to be M(int, string);\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "This approach does not allow you to do things like ignoring an individual case.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "2. It may be the exact type required by the method, but only when the method\ntakes just one argument, e.g.:\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "   int[] TestArguments = new int[] { 5, 42 };\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "The method signature for this case would be M(int);\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "This approach does not allow ignoring a test case, etc.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "As a special case of this approach, you could pass in a custom struct\nor class, e.g.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ":\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "   object[] TestArguments = new object[] {\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "            new MyStruct( 5, \"five\"),\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "            new MyStruct( 42, \"answer\")\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "   };\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "This last is what you have done and it does not allow ignoring tests\nor any of the\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "other special things suggested in the docs.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "3.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " You may use TestCaseData or any type of your own which has some of the\nsame properties which are supported by TestCaseData.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " One of those properties\nis Arguments and the items provided there must match the method parameters.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "So, for example...\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "   TestCaseData[] TestArguments = new TestCaseData[] {\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "      new TestCaseData(5, \"five\").", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Ignore(\"Still under development),\n      new TestCaseData(42, \"answer\")\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "   };\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "This is the only approach that allows use of Ignore, SetCategory, etc.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "So...\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "The obvious question is \"If I define a custom struct or class, how does\nNUnit decide whether I'm using approach #2 or #3?\"\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "I had to look at the code to figure it out.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " It checks for the presence of the\ninterface NUnit.Framework.ITestCaseData.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": " Note that the interface is not\nactually used by NUnit.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " In order to support multiple framework versions,\nreflection is used.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " But the interface helps identify the class and helps\nyou to make sure you are implementing the correct properties.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "In fact, the entire approach of defining your own replacement for TestCaseData\nis probably not worth supporting any longer.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": " The only reason I can see for\ndefining your own replacement is if you want to use a different fluent syntax\nfrom that supported by TestCaseData.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "However, so long as you use the ITestCaseData interface, your code will be\npretty compatible with version 3.0 - the interface could change, but\nwill likely\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "only add new properties.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "I hope this clears things up.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": " The entire area is a bit too complex for my taste,\nso the basic docs will probably just say to use TestCaseData in the future,\nand the stuff about implementing your own class will only be discussed\nunder the heading of extending NUnit.\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Charlie\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> Thanks.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " I'm afraid I don't understand your recommendation.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> This is the first bit I don't follow:\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> \"If you want your test to process the contents of your own struct or class, then use it as an argument and return that type.\"\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> Do you mean\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">        [TestCaseSource(typeof(SimTestDataGenerator), \"TestArguments\")]\n>        public void IndividualTestCasesShouldBeGenerated(Type simTestDescriptorClass) ?\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> What do I return \"that type\" from?\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> Sorry but I'm feeling pretty foolish here.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " Can you give me an example?\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> I don't follow this either:\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> \"If you want NUnit to perform processing described, then the actual arguments should be stored in an Arguments member.\"\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> A member of which class?\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> You also say\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> \"In fact, in that case, you may as well use TestCaseData, which contains all the functionality you are looking for and will also continue to work under NUnit 3.0, where we no longer use reflection in this way.\"\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> I don't want to write code that will be deprecated in the next version\n> of NUnit so does that mean TestCaseData will be the only way forward?\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> I don't think I'm stupid but I'm coming at this for the first time and I\n> suspect the gulf between your familiarity and mine is the problem.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> Thanks for your time.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> --\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> TestCaseSource does not use Arguments, Categories etc as described in documentation for 2.5.7\n> https://bugs.launchpad.net/bugs/633884\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> You received this bug notification because you are a member of NUnit\n> Developers, which is subscribed to NUnit V2.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "charlie.poole", 
            "email": "charlie.poole"
        }, 
        {
            "date": "2010-09-14 15:08:17", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "Re: TestCaseSource does not use Arguments, Categories etc as described in documentation for 2.5.7\nThanks Charlie.", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "  I'm running (almost) happily with TestCaseData now.\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "I say \"almost\" because I've a use case that doesn't seem to be covered.", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "  I want to be able to pass data _in_ to the test case data generator.", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "  E.g.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " I'm generating data from a file.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "  I don't want to build the file name into the data generator.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "I can see a possible solution - call the [TextFixtureSetUp] way up front, before any generation of dynamic tests.", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "  At the moment this gets called _after_ the tests are generated - too late!", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " (I've also tried [SetUpFixture]/[SetUp] but they seem to get called after the test generation too.)\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "Calling it first is not ideal but it allows the name of the file I want to be  used to be used by the generator class.", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "  I could do it from a global class's static property (yuch!)", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ".\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "e.g.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " Let the generator \"know\" about the TestFixture class but it could be any global class.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "[TestFixture]\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "public class TestHarness ....\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "   static string Filename { get;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " set;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": " } // This holds the name of the file to be used in generating test data\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "   [TextFixtureSetUp]\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "   public void SetUp()\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "   {\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "      Filename = ...", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " // doesn't work at the moment because the order of execution means this is called too late.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "   }\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "   [TestCaseData(\"Generator\", \"GetData\"]\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "   public void ...\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "...\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "}\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "and in the Generator class:\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "public class Generator\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "{\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "   public Generator()\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "   {\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "      Filename = TestHarness.Filename;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "  // now it can be used in this class\n      ...\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "   }\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "   public IEnumerable<..", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> GetData...\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "   {\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "---------------------------------------------------------------\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Thanks again - dynamic tests are really important.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "hamish-gunn", 
            "email": "hamish-gunn"
        }, 
        {
            "date": "2010-09-14 16:02:48", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "Re: [Bug 633884] Re: TestCaseSource does not use Arguments, Categories etc as described in documentation for 2.5.7\nYes...", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": " NUnit currently generates all tests at the time the assembly is loaded,\nwhich is of course before any of them are run.", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": " I sometimes call these \"static\"\ntests - although I'm not sure that's the best name.\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": "We also expect to have \"dynamic\" tests in NUnit 3.0, generated immediately\nbefore the tests are executed.", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " Some existing attributes will be redefined to\nproduce tests dynamically and new attributes will be added.\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "This is actually a much more extensive change than you might imagine,\nwhich is why it isn't happening in 2.x.\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "Charlie\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "On Tue, Sep 14, 2010 at 8:08 AM, Hamish Gunn <email address hidden> wrote:\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> Thanks Charlie.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " I'm running (almost) happily with TestCaseData now.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> I say \"almost\" because I've a use case that doesn't seem to be covered.\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> I want to be able to pass data _in_ to the test case data generator.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> E.g.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": " I'm generating data from a file.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": " I don't want to build the file\n> name into the data generator.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> I can see a possible solution - call the [TextFixtureSetUp] way up\n> front, before any generation of dynamic tests.", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": " At the moment this gets\n> called _after_ the tests are generated - too late!", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " (I've also tried\n> [SetUpFixture]/[SetUp] but they seem to get called after the test\n> generation too.)\n", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> Calling it first is not ideal but it allows the name of the file I want\n> to be used to be used by the generator class.", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " I could do it from a\n> global class's static property (yuch!)", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ".\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> e.g.", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": " Let the generator \"know\" about the TestFixture class but it could\n> be any global class.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> [TestFixture]\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> public class TestHarness ....\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">  static string Filename { get;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " set;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": " } // This holds the name of the\n> file to be used in generating test data\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">  [TextFixtureSetUp]\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">  public void SetUp()\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">  {\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">   Filename = ...", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " // doesn't work at the moment because the order of execution means this is called too late.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">  }\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">  [TestCaseData(\"Generator\", \"GetData\"]\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">  public void ...\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> ...\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> }\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> and in the Generator class:\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> public class Generator\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> {\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">  public Generator()\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">  {\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">   Filename = TestHarness.Filename;", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": true, 
                    "text": " // now it can be used in this class\n>   ...\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">  }\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">  public IEnumerable<..", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> GetData...\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">  {\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> ---------------------------------------------------------------\n>\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> Thanks again - dynamic tests are really important.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> --\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> TestCaseSource does not use Arguments, Categories etc as described in documentation for 2.5.7\n> https://bugs.launchpad.net/bugs/633884\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": "> You received this bug notification because you are a member of NUnit\n> Developers, which is subscribed to NUnit V2.\n", 
                    "is_in_email_summary": false
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": ">\n", 
                    "is_in_email_summary": false
                }
            ], 
            "name": "charlie.poole", 
            "email": "charlie.poole"
        }, 
        {
            "date": "2010-09-28 19:45:57", 
            "sentences": [
                {
                    "is_in_lex_summary": true, 
                    "text": "Re: TestCaseSource does not use Arguments, Categories etc as described in documentation for 2.5.7\nAs it turns out, both the documentation and my answer above wasn't correct.", 
                    "is_in_email_summary": true
                }, 
                {
                    "is_in_lex_summary": false, 
                    "text": " See the updated\nentry on the web site.\n", 
                    "is_in_email_summary": true
                }
            ], 
            "name": "charlie.poole", 
            "email": "charlie.poole"
        }
    ], 
    "title": "TestCaseSource does not use Arguments, Categories etc as described in documentation for 2.5.7"
}