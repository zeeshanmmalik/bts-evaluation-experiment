- summary_shown = 'lex'
-# - if rand > 0.5
-#   - summary_shown = 'email'

/%p#notice= notice

.hero-unit.bg-dark
  .container
    .row
      .span13
        %h3
          #{@bug_report.project} Bug #{@bug_report.bug_identifier}
        %h4
          %a.btn.btn-info.btn-large.pull-right{:href => "#{@bug_report.original_link}", :target => "_blank"}
            #{@bug_report.title}

= form_for @participant.response, :url => @bug_report, :method => :get do |f|
  = hidden_field_tag :bug_report_id, @bug_report.id
  = hidden_field_tag :participant_id, @participant.id
  = hidden_field_tag :access_token, @participant.access_token        
  .container-fluid
    .row-fluid
      .span12
        .container-fluid.container-box
          .row-fluid.summaries
            .span12
              .row-fluid
                .span12
                  %h3 Introduction
                  %p
                  %p 
                    In order to help us evaluate our bug report summary generator, we kindly 
                    ask you to evaluate a summary we have created for a #{@bug_report.project} 
                    bug report. Since this is a bug you have commented on, we presume you
                    should have some familiarity with the bug, facilitating the evaluation
                    process and judgement.
                  %p
                    Our approach for creating this summary uses a combination of heuristics, 
                    machine learning, and sentiment analysis to extract important sentences from the
                    bug report, that together will form the summary.
                    The summary we have created reduces the length of the bug report, in number
                    of words, to 25% of its original size.
                  %p
                    This evaluation asks you to read the summary carefuly, judging its quality
                    and usefulness, and to answer 5 questions.#{@bug_report.experiment.end_at.blank? ? '' : ' Please submit your response before survey close time '+@bug_report.experiment.end_at.to_s+'.'} 

          .row-fluid.summaries
            .span12
              .row-fluid
                .span12
                  %h3 Questions
                  .question-container
                    .question
                      <b>Q1</b>: Below is a <b>condensed view</b> of the summary. In a condensed view,
                      we only present the sentences that have been extraced from the original
                      bug report.

                    %fieldset.summary.fix-height
                      <b>Title</b>: #{@bug_report.title}
                      / %legend Lex Summary
                      / select a summary randomly
                      - @bug_report.comments.each do |com|
                        - if com.sentences.where( 'is_in_'+summary_shown+'_summary' => true ).count > 0
                          .comment-header.ui-state-default.ui-corner-right.ui-corner-left
                            = com.number
                            \|
                            = com.submitted_at
                            \|
                            = com.participant.username
                          .comment-body
                            - com.sentences.order('number ASC').each do |sen|
                              - if sen.text.strip.empty?
                                %p
                              - elsif sen.send('is_in_'+summary_shown+'_summary')
                                %pre.sentence{ :sen_id => "#{sen.id}", :bug_id => "#{@bug_report.id}", :com_id => "#{com.id}" }
                                  = raw sen.text.gsub("\n","<br>")

                    .question
                      Please read the summary, and, based on your expert knowledge of this bug,
                      provide a rate from 0 to 5 indicating how much you consider
                      each of the following statements is true for the summary:
                      .subquestion
                        a) 
                        %i Important points of the bug report are represented in the summary.
                      .answer.subanswer 
                        .radio-buttons
                          - 0.upto(5) do |i|
                            = f.radio_button 'imp_points_incl_'+summary_shown+'_sum', i
                            = f.label 'imp_points_incl_'+summary_shown+'_sum', i, :value => i

                      .subquestion
                        b) 
                        %i The summary avoids redundancy.
                      .answer.subanswer
                        .radio-buttons
                          - 0.upto(5) do |i|
                            = f.radio_button 'redundancy_'+summary_shown+'_sum', i
                            = f.label 'redundancy_'+summary_shown+'_sum', i, :value => i

                      .subquestion
                        c) 
                        %i The summary does not contain unnecessary information.
                      .answer.subanswer
                        .radio-buttons
                          - 0.upto(5) do |i|
                            = f.radio_button 'unnecessary_info_'+summary_shown+'_sum', i
                            = f.label 'unnecessary_info_'+summary_shown+'_sum', i, :value => i

                      .subquestion
                        d) 
                        %i The summary is coherent.
                      .answer.subanswer
                        .radio-buttons
                          - 0.upto(5) do |i|
                            = f.radio_button 'coherence_'+summary_shown+'_sum', i
                            = f.label 'coherence_'+summary_shown+'_sum', i, :value => i

                  .question-container
                    .question
                      <b>Q2</b>: Below is an <b>interlaced view</b> of the summary: sentences that have been extracted
                      are highlighted out from the rest of the sentences. You are to assess the
                      summary and identify the sentences that, from your point of view, have been:
                      %ul
                        %li incorrectly included in the summary;
                        %li or incorrectly omitted from the summary.
                      %p
                        You can mark the sentences you find have been incorrectly included or omitted by
                        clicking on the sentence. The sentences you mark will be highlighted in red.

                    %fieldset.summary.fix-height
                      <b>Title</b>: #{@bug_report.title}
                      / %legend #{summary_shown.humanize} Summary
                      - @bug_report.comments.order('number ASC').each do |com|
                        .comment
                          .comment-header.ui-state-default.ui-corner-right.ui-corner-left
                            = com.number
                            \|
                            = com.submitted_at
                            \|
                            = com.participant.email
                          .comment-body
                            - com.sentences.order('number ASC').each do |sen|
                              - part_sen = @participant.sentence_evaluations.where(:sentence_id => sen.id).first
                              - sen_imp = part_sen ? part_sen.importance : nil
                              - if sen.text.strip.empty?
                                %p
                              - elsif sen.send('is_in_'+summary_shown+'_summary')
                                =# hidden_field_tag 'sentences[]['+sen.id.to_s+']', sen_imp || '1'
                                %pre.sentence.eval-sen.highlight{ :sen_id => "#{sen.id}", :bug_id => "#{@bug_report.id}", :com_id => "#{com.id}", :importance => "#{sen_imp || 1}", :class => "#{(sen_imp and sen_imp == -1) ? 'wrong-highlight' : ''}" }
                                  = raw sen.text.gsub("\n","<br>")
                              - else
                                %pre.sentence.eval-sen{ :sen_id => "#{sen.id}", :bug_id => "#{@bug_report.id}", :com_id => "#{com.id}", :importance => "#{sen_imp || 0}", :class => "#{(sen_imp and sen_imp == 1) ? 'important-highlight' : ''}" }
                                  =# hidden_field_tag 'sentences[]['+sen.id.to_s+']', sen_imp || '0'
                                  = raw sen.text.gsub("\n","<br>")

                  .question-container
                    .question
                      <b>Q3</b>: Please select the view (condensed or highlighted) you find most appropriate 
                      for reading bug report summaries.
                    .answer
                      .choices{ :style => 'display: block;' }
                        .radio-buttons
                          - ['condensed','interlaced'].each do |view|
                            = radio_button_tag "q5", view
                            = label_tag "q5_#{view}", view.humanize
                      What do you consider are the advantages of one over the other?
                      %br
                      = text_area_tag "q5_reason", nil, :size => "250x6"

                  .question-container
                    .question
                      <b>Q4</b>: What do you consider to be the most important information a bug 
                      report summary should contain?
                    .answer
                      = f.text_area :important_info_in_summary

                  .question-container
                    .question
                      <b>Q5</b>: We now present the summary you have created by identifying the sentences that
                      have been incorrectly included or omitted. Since it has been revised by you, an expert,
                      we can consider it as a "golden standard" for a summary.

                    .row-fluid
                      .span12
                        %fieldset.summary.fix-height
                          <b>Title</b>: #{@bug_report.title}
                          / %legend #{summary_shown.humanize} Summary
                          - @bug_report.comments.order('number ASC').each do |com|
                            .comment
                              .comment-header.ui-state-default.ui-corner-right.ui-corner-left.user-summary{ :id => "#{com.id}" }
                                = com.number
                                \|
                                = com.submitted_at
                                \|
                                = com.participant.email
                              .comment-body
                                - com.sentences.order('number ASC').each do |sen|
                                  - part_sen = @participant.sentence_evaluations.where(:sentence_id => sen.id).first
                                  - sen_imp = part_sen ? part_sen.importance : nil
                                  - if sen.text.strip.empty?
                                    %p
                                  - elsif sen.send('is_in_'+summary_shown+'_summary')
                                    =# hidden_field_tag 'sentences[]['+sen.id.to_s+']', sen_imp || '1'
                                    %pre.sentence.highlight.user-summary{ :sen_id => "#{sen.id}", :bug_id => "#{@bug_report.id}", :com_id => "#{com.id}", :importance => "#{sen_imp || 1}", :class => "#{(sen_imp and sen_imp == -1) ? 'wrong-highlight' : ''}" }
                                      = raw sen.text.gsub("\n","<br>")
                                  - else
                                    %pre.sentence.user-summary{ :sen_id => "#{sen.id}", :bug_id => "#{@bug_report.id}", :com_id => "#{com.id}", :importance => "#{sen_imp || 0}", :class => "#{(sen_imp and sen_imp == 1) ? 'important-highlight' : ''}" }
                                      =# hidden_field_tag 'sentences[]['+sen.id.to_s+']', sen_imp || '0'
                                      = raw sen.text.gsub("\n","<br>")

                    .question
                      Given such an optimal summary, in what situations do you consider bug report summaries could be helpful?
                      .subquestion
                        a)
                        %i When looking for a similar or duplicate bug; 
                      .answer.subanswer
                        .radio-buttons
                          - 0.upto(5) do |i|
                            = f.radio_button :sum_help_bug_similar, i
                            = f.label "sum_help_bug_similar", i, :value => i
                      .subquestion
                        b)
                        %i When looking for a solution or workaround to a bug;
                      .answer.subanswer
                        .radio-buttons
                          - 0.upto(5) do |i|
                            = f.radio_button :sum_help_bug_workaround, i
                            = f.label "sum_help_bug_workaround", i, :value => i
                      .subquestion
                        c)
                        %i When trying to understand the status of a bug and its open issues;
                      .answer.subanswer
                        .radio-buttons
                          - 0.upto(5) do |i|
                            = f.radio_button :sum_help_bug_status, i
                            = f.label "sum_help_bug_status", i, :value => i
                      .answer
                        Feel free to elaborate, or include any other situations in which summaries would be helpful.
                        = f.text_area :summarizing_reason

                  .question-container
                    .question
                      Please let us know if you'd like to receive the result of this
                      evaluation. We can gladly send you information describing our summarization
                      approach and evaluation results.
                    .answer
                      .radio-buttons
                        - ['yes','no'].each do |choice|
                          = f.radio_button :contact_for_results, choice
                          = f.label :contact_for_results, choice.humanize, :value => choice

                  %p
                  = f.submit 'Submit Response', :class => 'btn-submit-form btn btn-success btn-large'
    %hr
    %footer
      %center
        %a.bla{:href => "http://gsd.uwaterloo.ca", :target => '_blank'}
          GSD Lab, University of Waterloo
